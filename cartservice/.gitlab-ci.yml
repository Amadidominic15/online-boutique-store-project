variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  SERVICE_NAME: "cartservice"

stages:
  - build
  - test
  - sonar
  - package
  - update-helm
  - deploy_pipeline

.dotnet_cache: &dotnet_cache
  cache:
    key: "${CI_COMMIT_REF_SLUG}-dotnet"
    paths:
      - .nuget/packages

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0
  tags:
    - aws
    - docker 
  <<: *dotnet_cache
  script:
    - dotnet restore
    - dotnet build --no-restore --configuration Release
  artifacts:
    paths:
      - src/bin/
      - src/obj/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:9.0
  tags:
    - aws
    - docker
  needs:
    - build
  <<: *dotnet_cache
  before_script:
    - dotnet tool install --global trx2junit
    - export PATH="$PATH:/root/.dotnet/tools"
  script:
    - dotnet restore
    - dotnet test --configuration Release --logger trx --results-directory ./TestResults
    - trx2junit ./TestResults/*.trx
  artifacts:
    reports:
      junit:
        - TestResults/*.xml
    paths:
      - TestResults/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

sonar:
  stage: sonar
  image: mcr.microsoft.com/dotnet/sdk:9.0
  tags:
    - aws
    - docker 
  needs:
    - test
  <<: *dotnet_cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apt-get update && apt-get install -y openjdk-17-jre-headless
    - dotnet tool install --global dotnet-sonarscanner
    - export PATH="$PATH:/root/.dotnet/tools"
  script:
    - >
      dotnet sonarscanner begin
      /k:"seunayolu_gitops-cartservice"
      /o:"${SONAR_ORGANIZATION}"
      /d:sonar.host.url="${SONAR_HOST_URL}"
      /d:sonar.token="${SONAR_TOKEN}"
    - dotnet build --configuration Release
    - dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

package:
  stage: package
  image: docker:28.3.3
  tags:
    - aws
    - docker
  services:
    - docker:28.3.3-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT: 1 
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - >
      docker buildx build
      --cache-to type=inline
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/${SERVICE_NAME}:$CI_COMMIT_SHORT_SHA
      -t $CI_REGISTRY_IMAGE/${SERVICE_NAME}:$CI_COMMIT_SHORT_SHA
      -f src/Dockerfile
      --push src/    
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

update-helm-values:
  stage: update-helm
  image: alpine:latest
  tags:
    - aws
    - docker 
  needs:
    - package
  before_script:
    - apk add --no-cache git yq
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone https://gitlab-ci-token:${HELM_REPO_TOKEN}@${HELM_REPO_URL#https://} helm-repo
    - cd helm-repo/microservices-chart
    - git checkout feature/boutique-helm
    - yq eval ".services.${SERVICE_NAME}.image.repository = \"$CI_REGISTRY_IMAGE/${SERVICE_NAME}\"" -i values.yaml
    - yq eval ".services.${SERVICE_NAME}.image.tag = \"$CI_COMMIT_SHORT_SHA\"" -i values.yaml
    - git add values.yaml
    - git commit -m "Update ${SERVICE_NAME} image to ${CI_COMMIT_SHORT_SHA}"
    - git push origin feature/boutique-helm
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

trigger_deploy_pipeline:
  stage: deploy_pipeline
  needs:
    - update-helm-values
  trigger:
    project: seunayolu/gitops-helm
    branch: feature/boutique-helm
    strategy: depend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"