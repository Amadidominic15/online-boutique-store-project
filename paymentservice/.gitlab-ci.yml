variables:
  NODE_VERSION: "20"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  SERVICE_NAME: "paymentservice"

stages:
  - build
  - test
  - security
  - sonar
  - package
  - update-helm
  - deploy_pipeline

.node_cache: &node_cache
  cache:
    key: "${CI_COMMIT_REF_SLUG}-node"
    paths:
      - node_modules/

build:
  stage: build
  image: node:${NODE_VERSION}
  <<: *node_cache
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

test:
  stage: test
  image: node:${NODE_VERSION}
  needs:
    - build
  <<: *node_cache
  script:
    - |
      if npm run test --silent 2>/dev/null; then
        echo "Tests passed"
      else
        echo "No tests configured or tests failed"
        echo "Skipping test execution for now"
      fi
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

security:
  stage: security
  image: node:${NODE_VERSION}
  needs:
    - build
  <<: *node_cache
  script:
    - npm audit --audit-level=moderate || echo "Security vulnerabilities found but continuing..."
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

sonar:
  stage: sonar
  image: node:${NODE_VERSION}
  needs:
    - test
    - security
  <<: *node_cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apt-get update && apt-get install -y openjdk-17-jre-headless wget unzip
    - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
    - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
    - export PATH="$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin"
  script:
    - >
      sonar-scanner
      -Dsonar.projectKey="seunayolu_gitops-paymentservice"
      -Dsonar.organization="${SONAR_ORGANIZATION}"
      -Dsonar.host.url="${SONAR_HOST_URL}"
      -Dsonar.token="${SONAR_TOKEN}"
      -Dsonar.sources=.
      -Dsonar.exclusions="node_modules/**"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

package:
  stage: package
  image: docker:28.3.3
  needs:
    - sonar
  tags:
    - ec2_2
  services:
    - docker:28.3.3-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - >
      docker buildx build
      --cache-to type=inline
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/${SERVICE_NAME}:latest
      -t $CI_REGISTRY_IMAGE/${SERVICE_NAME}:$CI_COMMIT_SHORT_SHA
      -t $CI_REGISTRY_IMAGE/${SERVICE_NAME}:latest
      -f Dockerfile
      --push .    
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    
update-helm-values:
  stage: update-helm
  image: alpine:latest
  needs:
    - package
  before_script:
    - apk add --no-cache git yq
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone https://gitlab-ci-token:${HELM_REPO_TOKEN}@${HELM_REPO_URL#https://} helm-repo
    - cd helm-repo/microservices-chart
    - git checkout feature/boutique-helm
    - yq eval ".services.${SERVICE_NAME}.image.repository = \"$CI_REGISTRY_IMAGE/${SERVICE_NAME}\"" -i values.yaml
    - yq eval ".services.${SERVICE_NAME}.image.tag = \"$CI_COMMIT_SHORT_SHA\"" -i values.yaml
    - git add values.yaml
    - git commit -m "Update ${SERVICE_NAME} image to ${CI_COMMIT_SHORT_SHA}"
    - git push origin feature/boutique-helm
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

trigger_deploy_pipeline:
  stage: deploy_pipeline
  needs:
    - update-helm-values
  trigger:
    project: seunayolu/gitops-helm
    branch: feature/boutique-helm
    strategy: depend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"